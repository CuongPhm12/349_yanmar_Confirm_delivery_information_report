<%@page import="java.util.*"%>
<%@page import="java.sql.*"%>
<%@page import="java.net.*"%>
<%@page import="java.io.*"%>      
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.text.*"%>
<%@page import="java.math.*"%>
<%@page import="java.util.*"%>
<%@page import="java.util.Calendar"%>
<%@page import="java.time.*"%>
<%@page import="java.time.format.*"%>
<%@page import="com.google.gson.Gson"%> 
<%@page import="java.sql.DriverManager"%> 
<%@page import="java.sql.SQLException"%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="java.util.HashMap"%>
<%@page import="java.util.List"%>
<%@page import="java.util.Map"%>
<%@page import="java.util.regex.*"%>

<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%!
    public java.sql.Connection conn = null;
    public java.sql.PreparedStatement pstmt = null;
    public ResultSet rs = null;
    public Statement stmt = null;

    public String MENUCODE = "";
    
    public String referer = "";         
    public String userAgent = "";       
    public String host = "";            
    public String wlProxyClientIp = ""; 
    public String proxyClientIp = "";    
    public String xForwardedFor = "";   
    
    public String sqlCoumns = "";
    public String sqlValues = "";
    public String sqlDuplis = "";
    public Logger logger = LoggerFactory.getLogger(getClass());   
    
    public String msg(javax.servlet.http.HttpSession pSession, java.sql.Connection pConn, String code) {
        
        HashMap<String, String> param = new HashMap<>();          
        param = (HashMap<String, String>) pSession.getAttribute("login");
        String simbizlang = param.get("simbizlang");
        if("".equals(simbizlang)) {
            simbizlang = "KR";
        }
        
        String msg = getSOrder(pConn, "select ifnull(SIMBIZLANG, '') from simbiz.tb_cm_lang where LANGCODE = '" + code + "' and LANGTYPE = '" + simbizlang + "' ");
        
        return msg;
    }
    
    public String msg(java.sql.Connection pConn, String simbizlang, String code) {
        if(checkEmpty(simbizlang)) {
            simbizlang = "KR";
        }
        
        String msg = getSOrder(pConn, "select ifnull(SIMBIZLANG, '') from simbiz.tb_cm_lang where LANGCODE = '" + code + "' and LANGTYPE = '" + simbizlang + "' ");
        
        return msg;
    }
    
    public String msg(String simbizlang, java.sql.Connection pConn, String code) {
        if(checkEmpty(simbizlang)) {
            simbizlang = "KR";
        }
        
        String msg = getSOrder(pConn, "select ifnull(SIMBIZLANG, '') from simbiz.tb_cm_lang where LANGCODE = '" + code + "' and LANGTYPE = '" + simbizlang + "' ");
        
        return msg;
    }
    
    public boolean checkEmpty(Object obj) {
        String str = String.valueOf(obj);
        if(obj == null || "".equals(str) || "0".equals(str) || "null".equals(str.toLowerCase()))
            return true;
        else
            return false;
    }

    public String generateCode(java.sql.Connection pConn, String pCode) { 
        String returnValue = null;
        try {
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            String csql = "";
            csql = "  select simbizlocal.GENERATE_CM_CODE('" + pCode + "') ";
            rs = stmt.executeQuery(csql);
            info("function/generateCode : " + csql);
            while (rs.next()) {
                int total_rows = rs.getMetaData().getColumnCount();
                JSONObject obj = new JSONObject();
                for (int z = 0; z < total_rows; z++) {
                    obj.put(rs.getMetaData().getColumnLabel(z + 1), rs.getObject(z + 1));
                    String column = "";
                    String value = "";
                    if ( rs.getMetaData().getColumnLabel(z + 1) != null ) {
                        column = rs.getMetaData().getColumnLabel(z + 1).toString();
                    }
                    if ( rs.getObject(z + 1) != null ) {
                        value = rs.getObject(z + 1).toString();
                    }
                    if ( value != null && !value.equals("") ) {
                        returnValue = value;
                    }
                }
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
            returnValue = null;
        }
        return returnValue; 
    }
    
    public Map<String, String> getRow(java.sql.Connection pConn, String TABLE_SCHEMA, String TABLE_NAME, Map<String, Object> map) { 
        Map<String, String> returnMap = new HashMap<>();
        try {
            sqlCoumns = "";
            sqlValues = "";
            sqlDuplis = "";
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            String csql = "";
            csql = "  SELECT COLUMN_NAME, COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='" + TABLE_SCHEMA + "' and TABLE_NAME='" + TABLE_NAME + "';";
            rs = stmt.executeQuery(csql);
            info("function/getRow : " + csql);
            while (rs.next()) {
                int total_rows = rs.getMetaData().getColumnCount();
                JSONObject obj = new JSONObject();
                String key = "";
                for (int z = 0; z < total_rows; z++) {
                    obj.put(rs.getMetaData().getColumnLabel(z + 1), rs.getObject(z + 1));
                    String column = "";
                    String value = "";
                    if ( rs.getMetaData().getColumnLabel(z + 1) != null ) {
                        column = rs.getMetaData().getColumnLabel(z + 1).toString();
                    }
                    if ( rs.getObject(z + 1) != null ) {
                        value = rs.getObject(z + 1).toString();
                    }
                    if ( value != null && !value.equals("") ) {
                        if (column.equals("COLUMN_NAME")) {
                            key = value;
                        } else {
                            if (map.get(key) == null || map.get(key).toString().equals("")) {
                                returnMap.put(key, "NULL");
                            } else if (value.contains("double") || value.contains("int")) {
                                String columnValue = map.get(key).toString().trim().replaceAll(" ", "").replaceAll("Â ", "").replaceAll("SIMBIZCOMMA", "").replaceAll(",", "");
                                if("-".equals(columnValue)) {
                                    columnValue = "0";
                                }
                                if("NaN".equals(columnValue) || "Infinity".equals(columnValue)) {
                                    columnValue = "NULL";
                                }
                                else {
                                    /*
                                    Pattern pattern = Pattern.compile("-?\\d+\\.?\\d*");
                                    Matcher matcher = pattern.matcher(columnValue);
                                    
                                    StringBuilder result = new StringBuilder();
                                    
                                    while (matcher.find()) {
                                        result.append(matcher.group());
                                    }
                                    
                                    columnValue = result.toString();
                                    
                                    if(checkEmpty(columnValue)) {
                                        columnValue = "NULL";
                                    }
                                    */
                                    
                                }
                                
                                returnMap.put(key, columnValue);
                            } else {
                                String columnValue = map.get(key).toString();
                                columnValue = columnValue.replaceAll("%", "SIMBIZPER");
                                columnValue = columnValue.replaceAll("'", "SIMBIZSQT");
                                columnValue = columnValue.replaceAll("\"", "SIMBIZDQT");
                                columnValue = columnValue.replaceAll(",", "SIMBIZCOMMA");
                                columnValue = columnValue.replaceAll("=", "SIMBIZEQ");
                                returnMap.put(key, "'" + columnValue.trim() + "'");
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return returnMap; 
    }
    
    public String getSOrder(java.sql.Connection pConn, String sql) { 
        String returnValue = "0";
        try {
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            rs = stmt.executeQuery(sql);
            info("function/getSOrder : " + sql);
            while (rs.next()) {
                int total_rows = rs.getMetaData().getColumnCount();
                JSONObject obj = new JSONObject();
                String key = "";
                for (int z = 0; z < total_rows; z++) {
                    obj.put(rs.getMetaData().getColumnLabel(z + 1), rs.getObject(z + 1));
                    String column = "";
                    String value = "";
                    if ( rs.getMetaData().getColumnLabel(z + 1) != null ) {
                        column = rs.getMetaData().getColumnLabel(z + 1).toString();
                    }
                    if ( rs.getObject(z + 1) != null ) {
                        value = rs.getObject(z + 1).toString();
                    }
                    if ( value != null && !value.equals("") ) {
                        returnValue = value;
                    }
                }
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return returnValue; 
    }
    
    public String selectQuery(java.sql.Connection pConn, String sql) { 
        String returnValue = null;
        try {
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            rs = stmt.executeQuery(sql);
            info("function/selectQuery : " + sql);
            while (rs.next()) {
                int total_rows = rs.getMetaData().getColumnCount();
                JSONObject obj = new JSONObject();
                for (int z = 0; z < total_rows; z++) {
                    obj.put(rs.getMetaData().getColumnLabel(z + 1), rs.getObject(z + 1));
                    String column = "";
                    String value = "";
                    if ( rs.getMetaData().getColumnLabel(z + 1) != null ) {
                        column = rs.getMetaData().getColumnLabel(z + 1).toString();
                    }
                    if ( rs.getObject(z + 1) != null ) {
                        value = rs.getObject(z + 1).toString();
                    }
                    if ( value != null && !value.equals("") ) {
                        returnValue = value;
                    }
                }
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return returnValue; 
    }
    
    
    public Map<String, Object> selectFirstQuery(java.sql.Connection pConn, String sql) {
        //Map<String, Object> result = new HashMap<>();
        Map<String, Object> result = null;
        try {
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            rs = stmt.executeQuery(sql);
            info("function/selectQuery : " + sql);
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();
            int check = 0;
            while (rs.next()) {
                if (check > 0) break;
                Map<String, Object> row = new HashMap<>(columns);
                for (int i = 1; i <= columns; ++i) {
                    row.put(md.getColumnName(i), rs.getObject(i));
                }
                result = row;
                check++;
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return result;
    }
    
    
    public List selectAllQuery(java.sql.Connection pConn, String sql) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            ResultSet rs = null;
            Statement stmt = null;
            stmt = pConn.createStatement();
            rs = stmt.executeQuery(sql);
            info("function/selectQuery : " + sql);
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();
            while (rs.next()) {
                Map<String, Object> row = new HashMap<>(columns);
                for (int i = 1; i <= columns; ++i) {
                    row.put(md.getColumnName(i), rs.getObject(i));
                }
                list.add(row);
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return list;
    }
    
    public void addHistory(String item_type, String sql) {
        try {
        /*
            String history =  " insert into simbizlocal.tb_ma_history (item_type, menu_cdoe, query, create_date, referer, user_agent, host, wl_proxy_client_ip, proxy_client_ip, x_forwarded_for) VALUES ('" 
            + item_type.toUpperCase() + "', '" + MENUCODE + "', " + "'" +  URLEncoder.encode(sql) + "', now(), '" + referer + "', '" + userAgent + "', '"  + host + "', '"  + wlProxyClientIp + "', '"  + proxyClientIp + "', '"  + xForwardedFor + "')";
            info(history);
            pstmt = conn.prepareStatement(history);
            pstmt.executeUpdate();
        */
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
    }
    
    public void addHistory(String sql) {
        try {
        /*
            String item_type = "";
            String[] temp = sql.split(" ");
            for (int i = 0; i < temp.length; i++) {
                item_type = temp[i];
                if (item_type.length() > 0) {
                    break;
                }
            }
            String history =  " insert into simbizlocal.tb_ma_history (item_type, menu_cdoe, query, create_date, referer, user_agent, host, wl_proxy_client_ip, proxy_client_ip, x_forwarded_for) VALUES ('" 
            + item_type.toUpperCase() + "', '" + MENUCODE + "', " + "'" +  URLEncoder.encode(sql) + "', now(), '" + referer + "', '" + userAgent + "', '"  + host + "', '"  + wlProxyClientIp + "', '"  + proxyClientIp + "', '"  + xForwardedFor + "')";
            info(history);
            pstmt = conn.prepareStatement(history);
            pstmt.executeUpdate();
        */
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
    }
    
    public String getMenuCode(String referer) {
        try {
            URL url = new URL(referer);
            String[] params = url.getQuery().split("&");
            Map<String, String> map = new HashMap<String, String>();
            for (String param : params)
            {
                String name = param.split("=")[0];
                if (name != null && name.equals("MENUCODE")) {
                    return param.split("=")[1];
                }
            }
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
        return "";
    }

    public void info(String log) { 
        logger.info("sinhwa : " + log);
    }
    
    public void printStackTrace(Exception e) { 
        info("=============================start printStackTrace=============================");
        for (StackTraceElement element : e.getStackTrace()) {
            info(element.toString());
        }
        info("=============================end   printStackTrace=============================");
    }

    public void setRequestData(javax.servlet.http.HttpServletRequest request) {
        try {
            referer         = URLEncoder.encode(request.getHeader("referer"));// ì ì ê²½ë¡
            userAgent       = request.getHeader("User-Agent");// ìì¤í ì ë³´
            host            = request.getHeader("host"); // ì ì ip
            wlProxyClientIp = request.getHeader("WL-Proxy-Client-IP");
            proxyClientIp   = request.getHeader("Proxy-Client-IP");
            xForwardedFor   = request.getHeader("X-Forwarded-For"); // í´ë¼ì´ì¸í¸ ip ì£¼ì ê°ì ¸ì¤ê¸°        
            MENUCODE        = getMenuCode(request.getHeader("referer"));
        } catch (Exception e) {
            info("Exception" + e.toString());
            printStackTrace(e);
        }
    }
    
    public String getColumn(Map<String, Object> map, String columnName) { 
        String returnValue = null;
        if (map.get(columnName) == null || map.get(columnName).toString().equals("")) {
            returnValue = "NULL";
        } else {
            String columnValue = map.get(columnName).toString();
            columnValue = columnValue.replaceAll("%", "SIMBIZPER");
            columnValue = columnValue.replaceAll("'", "SIMBIZSQT");
            columnValue = columnValue.replaceAll("\"", "SIMBIZDQT");
            columnValue = columnValue.replaceAll(",", "SIMBIZCOMMA");
            columnValue = columnValue.replaceAll("=", "SIMBIZEQ");
            returnValue = "'" + columnValue + "'";
        }
        return returnValue; 
    }
    
    
    public String getLastDate(String poDatetime) {
        String dateString = poDatetime.substring(0, 7); 
        YearMonth yearMonth = YearMonth.parse(dateString);

        LocalDate lastDayOfMonth = yearMonth.atEndOfMonth();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formattedLastDay = lastDayOfMonth.format(formatter);
        
        return formattedLastDay;
    }
    
    
    

    
    
    /*
    
    static String STOCK_STORE = "STORE";        //êµ¬ë§¤ìê³ 
    static String STOCK_MOVE_IN = "MOVE_IN";    //ì´ëìê³ 
    static String STOCK_ETC_IN = "ETC_IN";      //ê¸°íìê³ 
    static String STOCK_MANUFACTURE_START = "MANUFACTURE_START";    //ìííìì
    static String STOCK_MANUFACTURE_END = "MANUFACTURE_END";        //ìííì¢ë£
    static String STOCK_SALE = "SALE";            //íë§¤(ëë¦¬ì ì¶í)
    static String STOCK_MOVE_OUT = "MOVE_OUT";    //ì´ëì¶ê³ 
    static String STOCK_ETC_OUT = "ETC_OUT";      //ê¸°íì¶ê³ 
    
    public String stockControl(java.sql.Connection pConn, String controlType, Map<String, Object> map) { 
        if(STOCK_STORE.equals(controlType)) {
            Map<String, Object> param = new HashMap<String, Object>();
        
            param.put("stock_id", getSOrder(pConn, "select ifnull(max(stock_id), 0) + 1 from tb_stock "));
            param.put("item_cd", map.get("item_cd"));       // required
            param.put("ynk_yn", "Y");
            param.put("wh_cd", map.get("wh_cd"));       // required
            param.put("area_cd", map.get("area_cd"));   // option
            param.put("rack_cd", map.get("rack_cd"));   // option
            param.put("stock_store_type", map.get("êµ¬ë§¤ìê³ "));
            
            Object item_type = map.get("item_type");
            if(checkEmpty(item_type)) {
                item_type = getSOrder(pConn, "select item_type from tb_ma_item where item_cd = '" + map.get("item_cd") + "' ");
            }
            param.put("item_type", item_type);
            if("PROD".equals(item_type)) {
                param.put("product_stock_type", map.get("íë§¤ì©"));
                param.put("product_store_id", map.get("product_store_id"));     // required
                param.put("serial_id", map.get("serial_id"));                   // required
                
                if(checkEmpty(map.get("ship_doc_id"))) {
                    param.put("ship_doc_id", getSOrder(pConn, "select ship_doc_id from tb_product_serial where serial_id = " + map.get("serial_id") + " "));            
                }
                else{
                    param.put("ship_doc_id", map.get("ship_doc_id"));               
                }
                
                if(checkEmpty(map.get("built_date"))) {
                    param.put("built_date", getSOrder(pConn, "select built_date from tb_product_serial where serial_id = " + map.get("serial_id") + " "));            
                }
                else{
                    param.put("built_date", map.get("built_date"));               
                }
                
                String prod_etc1 = getSOrder(pConn, "select prod_etc1 from tb_ma_item where item_cd = '" + map.get("item_cd") + "' ");
                if("ëì".equals(prod_etc1)) {
                    param.put("manufacture_yn", "N");
                }
                else {
                    param.put("manufacture_yn", "Y");
                }
                
                
            }
            else {
                param.put("parts_store_id", map.get("parts_store_id"));             // required
                param.put("parts_store_sorder", map.get("parts_store_sorder"));     // required
            }
            
            param.put("po_no", map.get("po_no"));               // required
            param.put("delv_no", map.get("delv_no"));           // required
            param.put("delv_sorder", map.get("delv_sorder"));   // required
            param.put("store_date", map.get("store_date"));     // required
            param.put("store_qty", map.get("store_qty"));       // required
            param.put("move_in_qty", 0);
            param.put("etc_in_qty", 0);
            param.put("stock_qty", map.get("store_qty"));
            param.put("manufacturing_qty", 0);
            param.put("moving_qty", 0);
            param.put("sale_qty", 0);
            param.put("move_out_qty", 0);
            param.put("etc_out_qty", 0);
            param.put("manufacture_in_qty", 0);
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            param.put("", map.get(""));
            
        }
        else if(STOCK_MOVE_IN.equals(controlType)) {
            
        }
        else if(STOCK_ETC_IN.equals(controlType)) {
            
        }
        else if(STOCK_MANUFACTURE_START.equals(controlType)) {
            
        }
        else if(STOCK_MANUFACTURE_END.equals(controlType)) {
            
        }
        else if(STOCK_SALE.equals(controlType)) {
            
        }
        else if(STOCK_MOVE_OUT.equals(controlType)) {
            
        }
        else if(STOCK_ETC_OUT.equals(controlType)) {
            
        }
    }
    
    */
    
    
%>
