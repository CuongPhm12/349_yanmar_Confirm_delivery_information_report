<%@page import="java.util.*"%>
<%@page import="java.sql.*"%>
<%@page import="java.net.*"%>
<%@page import="java.io.*"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.util.Calendar"%>
<%@page import="com.google.gson.Gson"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.SQLException"%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/views/ajax/M000000001.jsp" %>
<%@ include file="/WEB-INF/views/ajax/M000000241.jsp" %>
<%
    Logger logger = LoggerFactory.getLogger(getClass());

    String header = (String)request.getParameter("header");
    String detail = (String)request.getParameter("detail");
    String sdetail = (String)request.getParameter("sdetail");
    String type = (String)request.getParameter("type");

    String driver = "org.mariadb.jdbc.Driver";
    String url = "jdbc:mariadb://localhost:3306/simbizlocal?useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8";

    String sLine = "";
    String sText = "";
    String user = "root";
    String password = "tlaqlwm2174";

    JSONObject jsonObj = new JSONObject();
    String PassText = null;
    String sql = "";
    java.sql.Connection conn = null;
    java.sql.PreparedStatement pstmt = null;
    ResultSet rs = null;
    Statement stmt = null;
    
    
    String UID = (String)request.getParameter("UID");
    
    java.text.SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
    java.util.Date time = new java.util.Date();
    String datetime = dateFormat.format(time);

    try {
        try {
            Class.forName(driver);
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);

            if ( type.equals("insert") || type.equals("edit") ) {
                Gson gson = new Gson();
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    String release_no = "";
                    for(int i = 0 ; i < list.size() ; i ++){
                        if (i == 0) {
                            release_no = list.get(i).get("release_no").toString();
                        } else {
                            if (list.get(i).get("release_no").toString().equals(release_no)) {
                                continue;
                            } else {
                                release_no = list.get(i).get("release_no").toString();
                            }
                        }
                        //clear sql statement
                        sqlCoumns = "";
                        sqlValues = "";
                        sqlDuplis = "";
                        String handle_type = list.get(i).get("handle_type").toString();
                        
                        //check status 
                        if (list.get(i).get("release_status").toString().equals("STATUS99")) {
                            throw new Exception("상차완료된 제품입니다!");
                        }
                        
                        //check tb_release_ng
                        if (!list.get(i).get("stock_id").toString().equals("") && !list.get(i).get("serial_id").toString().equals("") && !list.get(i).get("item_cd").toString().equals("")) {
                            String checkNg = getSOrder(conn, "select count(*) as cnt from tb_release_ng where ifnull(status,'출하중지') = '출하중지' and stock_id = " + list.get(i).get("stock_id").toString() + " and serial_id = " + list.get(i).get("serial_id").toString() + " and item_cd = '" + list.get(i).get("item_cd").toString() + "'");
                            if (!checkNg.equals("0")) {
                                throw new Exception("출고 불가능한 제품이 존재합니다!");
                            }
                        }
                        
                        if (handle_type.equals("wh")) {
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_wh", list.get(i));
                            
                            Iterator<String> keys = row.keySet().iterator();
                            while(keys.hasNext()){
                                String key = keys.next();
                                if ( row.get(key) != null) {                        
                                    String value = row.get(key);
                                    // 기본키 제외 duplicate sql 만들기
                                    if (!key.equals("release_no") && !key.equals("createuser") && !key.equals("createdate")) {
                                        if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                        sqlDuplis += (key + "=" + value);
                                    }
                                }
                            }
                            sql = " update tb_release_wh set " + sqlDuplis + " where release_no = " + row.get("release_no");
                            logger.info("update tb_release_wh");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                            
                            if (!row.get("load_type").equals("NULL") || !row.get("driver_name").equals("NULL") || !row.get("driver_tel_no").equals("NULL") || !row.get("car_no").equals("NULL")) {
                                sql =  " update tb_release_order_wh a join tb_release_wh_detail b on b.release_order_no = a.release_order_no set a.release_order_status = '완료' where b.release_no = " + row.get("release_no");
                                logger.info("update tb_release_order_wh");
                                logger.info(sql);
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                                addHistory(sql);
                                
                                sql =  " update tb_agency_order a join tb_release_wh_detail b on b.agency_order_no = a.agency_order_no set a.agency_order_status = '출고준비완료' where b.release_no = " + row.get("release_no") + " and a.agency_order_status = '출하의뢰'";
                                logger.info("update tb_agency_order");
                                logger.info(sql);
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                                addHistory(sql);
                                
                                sql = "update tb_stock set release_order_date = ifnull(release_order_date, date_format(now(), '%Y-%m-%d')) where stock_id = " + list.get(i).get("stock_id");
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                            }
                        }
                        if (handle_type.equals("storage")) {
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_storage", list.get(i));
                            
                            Iterator<String> keys = row.keySet().iterator();
                            while(keys.hasNext()){
                                String key = keys.next();
                                if ( row.get(key) != null) {                        
                                    String value = row.get(key);
                                    // 기본키 제외 duplicate sql 만들기
                                    if (!key.equals("release_no") && !key.equals("createuser") && !key.equals("createdate")) {
                                        if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                        sqlDuplis += (key + "=" + value);
                                    }
                                }
                            }
                            sql = " update tb_release_storage set " + sqlDuplis + " where release_no = " + row.get("release_no");
                            logger.info("update tb_release_storage");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                            
                            if (!row.get("load_type").equals("NULL") || !row.get("driver_name").equals("NULL") || !row.get("driver_tel_no").equals("NULL") || !row.get("car_no").equals("NULL")) {
                                sql =  " update tb_release_order_storage a join tb_release_wh_detail b on b.release_order_no = a.release_order_no set a.release_order_status = '완료' where b.release_no = " + row.get("release_no");
                                logger.info("update tb_release_order_storage");
                                logger.info(sql);
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                                addHistory(sql);
                                
                                sql = "update tb_stock set release_order_date = ifnull(release_order_date, date_format(now(), '%Y-%m-%d')) where stock_id = " + list.get(i).get("stock_id");
                                pstmt = conn.prepareStatement(sql);
                                pstmt.executeUpdate();
                            }
                        }
                        
                        
                        
                        
                        
                        
                        
                        
                    }
                }
                PassText = "저장 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }

            if ( type.equals("delete") ) {}
            
            if ( type.equals("cust_btn1") ) {
                Gson gson = new Gson();
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        String handle_type = list.get(i).get("handle_type").toString();
                            
                        //check tb_release_ng
                        if (!list.get(i).get("stock_id").toString().equals("") && !list.get(i).get("serial_id").toString().equals("") && !list.get(i).get("item_cd").toString().equals("")) {
                            String checkNg = getSOrder(conn, "select count(*) as cnt from tb_release_ng where ifnull(status,'출하중지') = '출하중지' and stock_id = " + list.get(i).get("stock_id").toString() + " and serial_id = " + list.get(i).get("serial_id").toString() + " and item_cd = '" + list.get(i).get("item_cd").toString() + "'");
                            if (!checkNg.equals("0")) {
                                throw new Exception("출고 불가능한 제품이 존재합니다!");
                            }
                        }
                        
                        if (handle_type.equals("wh")) {
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_wh", list.get(i));
                            
                            sql = " update tb_release_wh set release_status = 'STATUS99', load_finish_yn = 'Y', load_finish_date = '" + datetime + "' where release_no = " + row.get("release_no");
                            logger.info("update tb_release_wh");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                            
                            sql =  " update tb_agency_order set agency_order_status = '상차완료(출발)' where agency_order_no = '" + list.get(i).get("agency_order_no").toString() + "'";
                            logger.info("update tb_agency_order");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }
                        if (handle_type.equals("storage")) {
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_storage", list.get(i));
                            
                            sql = " update tb_release_storage set release_status = 'STATUS99', load_finish_yn = 'Y', load_finish_date = '" + datetime + "' where release_no = " + row.get("release_no");
                            logger.info("update tb_release_storage");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory("update", sql);
                        }
                    }
                }
                
                PassText = "저장 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
            if ( type.equals("cust_btn2") ) {}
            if ( type.equals("cust_btn3") ) {
                Gson gson = new Gson();
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        //clear sql statement
                        sqlCoumns = "";
                        sqlValues = "";
                        sqlDuplis = "";
                        String handle_type = list.get(i).get("handle_type").toString();
                        
                        //check status 
                        if (list.get(i).get("delv_fee") != null && !list.get(i).get("delv_fee").toString().equals("")) {
                            throw new Exception("운송비가 등록되어 있어서 취소불가합니다.");
                        }
                        
                        if (handle_type.equals("wh")) {
                            //update release order
                            sql =  " update tb_release_order_wh set release_order_status = '접수' where release_order_no = '" + list.get(i).get("release_order_no").toString() + "'";
                            logger.info("delete tb_release_order_wh");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        
                            //header
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_wh", list.get(i));
                            
                            //update tb_agency_order
                            sql =  " update tb_agency_order a join tb_release_wh_detail b on b.agency_order_no = a.agency_order_no set a.agency_order_status = '출하의뢰' where b.release_no = " + row.get("release_no");
                            logger.info("update tb_agency_order");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                                
                            //update tb_release_wh 
                            sql = " update tb_release_wh set load_type = null, driver_name = null, driver_tel_no = null, car_no = null,";
                            sql += " release_status = 'STATUS01', load_finish_yn = null, load_finish_date = null,";
                            sql += "updateuser = '" +  UID + "', updatedate = '" +  datetime + "' where release_no = " + row.get("release_no");
                            logger.info("update tb_release_wh");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }
                        if (handle_type.equals("storage")) {
                            //update release order
                            sql =  " update tb_release_order_storage set release_order_status = '접수' where release_order_no = '" + list.get(i).get("release_order_no").toString() + "'";
                            logger.info("delete tb_release_order_wh");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                            
                            //header
                            Map<String, String> row = getRow(conn, "simbizlocal", "tb_release_storage", list.get(i));
                                
                            //update tb_release_wh 
                            sql = " update tb_release_storage set load_type = null, driver_name = null, driver_tel_no = null, car_no = null,";
                            sql += " release_status = 'STATUS01', load_finish_yn = null, load_finish_date = null,";
                            sql += "updateuser = '" +  UID + "', updatedate = '" +  datetime + "' where release_no = " + row.get("release_no");
                            logger.info("update tb_release_storage");
                            logger.info(sql);
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();
                            addHistory(sql);
                        }
                    }
                }
                PassText = "취소 성공했습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
            
        if ( type.equals("get_data") ) {        
                Gson gson = new Gson();
                if(header != null){
                    JSONObject searchValue = new JSONObject(header);
                    String releaseNo = searchValue.getString("releaseNo").toString();
                    String dataSql = "select * ";
                    dataSql +=" from ( ";
                    dataSql +=" (select ";
                    dataSql +=" if (sorder is null, '---', start_wh_cd) as start_wh_cd ";
                    dataSql +=" , if (sorder is null, '---', wh_nm) as wh_nm ";
                    dataSql +=" , sorder ";
                    dataSql +=" , if (sorder is null, '---', address_detail) as address_detail ";
                    dataSql +=" , if (sorder is null, '---', load_type) as load_type";
                    dataSql +=" , if (sorder is null, '---', driver_name) as driver_name";
                    dataSql +=" , if (sorder is null, '---', driver_tel_no) as driver_tel_no";
                    dataSql +=" , if (sorder is null, '---', car_no) as car_no";
                    dataSql +=" , if (sorder is null, '---', load_finish_date) as load_finish_date";
                    dataSql +=" , if (sorder is null, null, release_status) as release_status";
                    dataSql +=" , if (sorder is null, null, release_status_name) as release_status_name";
                    dataSql +=" , if (sorder is null, null, carcass_cd) as carcass_cd";
                    dataSql +=" , if (sorder is null, null, sales_cd) as sales_cd";
                    dataSql +=" , release_qty";
                    dataSql +=" , if (sorder is null, null, option_1_name) as option_1_name";
                    dataSql +=" , if (sorder is null, null, option_3_name) as option_3_name";
                    dataSql +=" , if (sorder is null, null, agency_remark) as agency_remark";
                    dataSql +=" , if (sorder is null, null, ynk_remark) as ynk_remark";
                    dataSql +=" , if (sorder is null, null, machine_no) as machine_no";
                    dataSql +=" , if (sorder is null, null, built_no) as built_no";
                    dataSql +=" , if (sorder is null, null, engine_no) as engine_no";
                    dataSql +=" , if (sorder is null, null, name_plate) as name_plate";
                    dataSql +=" , if (sorder is null, null, approval_no) as approval_no";
                    dataSql +=" , if (sorder is null, null, delv_method) as delv_method";
                    dataSql +=" , if (sorder is null, null, delv_type) as delv_type";
                    dataSql +=" , if (sorder is null, null, end_agency_cd) as end_agency_cd";
                    dataSql +=" , if (sorder is null, null, end_wh_cd) as end_wh_cd";
                    dataSql +=" , if (sorder is null, null, end_agency_tel_no) as end_agency_tel_no";
                    dataSql +=" , if (sorder is null, null, end_fax_no) as end_fax_no";
                    dataSql +=" , if (sorder is null, null, end_agency_address) as end_agency_address";
                    dataSql +=" , if (sorder is null, null, delv_cust_cd) as delv_cust_cd";
                    dataSql +=" , if (sorder is null, null, delv_cust_tel_no) as delv_cust_tel_no";
                    dataSql +=" , delv_cust_remark";
                    dataSql +=" , if (sorder is null, null, load_finish_yn) as load_finish_yn";
                    dataSql +=" , if (sorder is null, null, stock_id) as stock_id";
                    dataSql +=" , if (sorder is null, null, serial_id) as serial_id";
                    dataSql +=" , item_cd";
                    dataSql +=" , release_order_no";
                    dataSql +=" , agency_order_no";
                    dataSql +=" , release_no";
                    dataSql +=" , delv_fee";
					dataSql +=" , spec";
					dataSql +=" , plate_no3 ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" from (select a.start_wh_cd";
                    dataSql +=" , wh.wh_nm";
                    dataSql +=" , a.release_no";
                    dataSql +=" , b.sorder";
                    dataSql +=" , od.address_detail";
                    dataSql +=" , a.load_type";
                    dataSql +=" , a.driver_name";
                    dataSql +=" , a.driver_tel_no";
                    dataSql +=" , a.car_no";
                    dataSql +=" , a.load_finish_date";
                    dataSql +=" , a.release_status";
                    dataSql +=" , rs.release_status_name";
                    dataSql +=" , item.item_cd";
                    dataSql +=" , item.carcass_cd";
                    dataSql +=" , item.sales_cd";
                    dataSql +=" , SUM(ifnull(b.release_qty,0)) as release_qty";
                    dataSql +=" , ot1.option_name as option_1_name";
                    dataSql +=" , ot3.option_name as option_3_name";
                    dataSql +=" , od.agency_remark";
                    dataSql +=" , od.ynk_remark";
                    dataSql +=" , serial.machine_no";
                    dataSql +=" , serial.built_no";
                    dataSql +=" , serial.engine_no";
                    dataSql +=" , serial.name_plate";
                    dataSql +=" , serial.approval_no";
                    dataSql +=" , a.delv_method";
                    dataSql +=" , a.delv_type";
                    dataSql +=" , a.end_agency_cd";
                    dataSql +=" , a.end_wh_cd";
                    dataSql +=" , a.end_agency_tel_no";
                    dataSql +=" , a.end_fax_no";
                    dataSql +=" , a.end_agency_address";
                    dataSql +=" , a.delv_cust_cd";
                    dataSql +=" , a.delv_cust_tel_no";
                    dataSql +=" , a.delv_cust_remark";
                    dataSql +=" , a.load_finish_yn";
                    dataSql +=" , b.stock_id";
                    dataSql +=" , b.serial_id";
                    dataSql +=" , od.release_order_no";
                    dataSql +=" , b.agency_order_no";
                    dataSql +=" , a.delv_fee";
					dataSql +=" , item.spec";
					dataSql +=" , z.plate_no3 ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" from tb_release_wh a";
                    dataSql +=" left join tb_release_wh_detail b on b.release_no = a.release_no";
                    dataSql +=" left join tb_ma_agency ag on ag.agency_cd = a.end_agency_cd";
                    dataSql +=" left join tb_release_order_wh od on od.release_order_no = b.release_order_no";
                    dataSql +=" left join vw_ma_item item on item.item_cd = b.item_cd";
                    dataSql +=" left join tb_product_serial serial on serial.serial_id = b.serial_id";
                    dataSql +=" left join tb_ma_wh wh on wh.wh_cd = a.start_wh_cd and wh.use_yn = 'Y'";
                    dataSql +=" left join vw_ma_code_release_status rs on rs.release_status = a.release_status ";
                    dataSql +=" left join vw_ma_item_parts_option ot1 on ot1.option_item_cd = b.option_1 and ot1.item_cd = b.item_cd and ot1.parts_option_type = 'W' ";
                    dataSql +=" left join vw_ma_item_parts_option ot3 on ot3.option_item_cd = b.option_3 and ot3.item_cd = b.item_cd and ot3.parts_option_type = 'H' ";
                    dataSql +=" LEFT JOIN tb_manufacture_work z ON z.prod_item_cd  = b.item_cd AND z.serial_id  = b.serial_id ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" group by a.release_no, b.sorder with rollup) a";
                    dataSql +=" where a.sorder is not null)";
                    dataSql +=" union all";
                    dataSql +=" (select ";
                    dataSql +=" if (sorder is null, '---', start_wh_cd) as start_wh_cd";
                    dataSql +=" , if (sorder is null, '---', wh_nm) as wh_nm";
                    dataSql +=" , sorder";
                    dataSql +=" , if (sorder is null, '---', address_detail) as address_detail";
                    dataSql +=" , if (sorder is null, '---', load_type) as load_type";
                    dataSql +=" , if (sorder is null, '---', driver_name) as driver_name";
                    dataSql +=" , if (sorder is null, '---', driver_tel_no) as driver_tel_no";
                    dataSql +=" , if (sorder is null, '---', car_no) as car_no";
                    dataSql +=" , if (sorder is null, '---', load_finish_date) as load_finish_date";
                    dataSql +=" , if (sorder is null, null, release_status) as release_status";
                    dataSql +=" , if (sorder is null, null, release_status_name) as release_status_name";
                    dataSql +=" , if (sorder is null, null, carcass_cd) as carcass_cd";
                    dataSql +=" , if (sorder is null, null, sales_cd) as sales_cd";
                    dataSql +=" , release_qty";
                    dataSql +=" , if (sorder is null, null, option_1_name) as option_1_name";
                    dataSql +=" , if (sorder is null, null, option_3_name) as option_3_name";
                    dataSql +=" , if (sorder is null, null, agency_remark) as agency_remark";
                    dataSql +=" , if (sorder is null, null, ynk_remark) as ynk_remark";
                    dataSql +=" , if (sorder is null, null, machine_no) as machine_no";
                    dataSql +=" , if (sorder is null, null, built_no) as built_no";
                    dataSql +=" , if (sorder is null, null, engine_no) as engine_no";
                    dataSql +=" , if (sorder is null, null, name_plate) as name_plate";
                    dataSql +=" , if (sorder is null, null, approval_no) as approval_no";
                    dataSql +=" , if (sorder is null, null, delv_method) as delv_method";
                    dataSql +=" , if (sorder is null, null, delv_type) as delv_type";
                    dataSql +=" , if (sorder is null, null, end_agency_cd) as end_agency_cd";
                    dataSql +=" , if (sorder is null, null, end_wh_cd) as end_wh_cd";
                    dataSql +=" , if (sorder is null, null, end_agency_tel_no) as end_agency_tel_no";
                    dataSql +=" , if (sorder is null, null, end_fax_no) as end_fax_no";
                    dataSql +=" , if (sorder is null, null, end_agency_address) as end_agency_address";
                    dataSql +=" , if (sorder is null, null, delv_cust_cd) as delv_cust_cd";
                    dataSql +=" , if (sorder is null, null, delv_cust_tel_no) as delv_cust_tel_no";
                    dataSql +=" , delv_cust_remark";
                    dataSql +=" , if (sorder is null, null, load_finish_yn) as load_finish_yn";
                    dataSql +=" , if (sorder is null, null, stock_id) as stock_id";
                    dataSql +=" , if (sorder is null, null, serial_id) as serial_id";
                    dataSql +=" , item_cd";
                    dataSql +=" , release_order_no";
                    dataSql +=" , agency_order_no";
                    dataSql +=" , release_no as release_no_print";
                    dataSql +=" , delv_fee";
					dataSql +=" , spec";
					dataSql +=" , plate_no3 ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" from (select a.start_wh_cd";
                    dataSql +=" , wh.wh_nm";
                    dataSql +=" , a.release_no";
                    dataSql +=" , b.sorder";
                    dataSql +=" , '' address_detail";
                    dataSql +=" , a.load_type";
                    dataSql +=" , a.driver_name";
                    dataSql +=" , a.driver_tel_no";
                    dataSql +=" , a.car_no";
                    dataSql +=" , a.load_finish_date";
                    dataSql +=" , a.release_status";
                    dataSql +=" , rs.release_status_name";
                    dataSql +=" , item.item_cd";
                    dataSql +=" , item.carcass_cd";
                    dataSql +=" , item.sales_cd";
                    dataSql +=" , SUM(ifnull(b.release_qty,0)) as release_qty";
					dataSql +=" , ot1.option_name as option_1_name";
                    dataSql +=" , ot3.option_name as option_3_name";
                    dataSql +=" , '' agency_remark";
                    dataSql +=" , '' ynk_remark";
                    dataSql +=" , serial.machine_no";
                    dataSql +=" , serial.built_no";
                    dataSql +=" , serial.engine_no";
                    dataSql +=" , serial.name_plate";
                    dataSql +=" , serial.approval_no";
                    dataSql +=" , a.delv_method";
                    dataSql +=" , a.delv_type";
                    dataSql +=" , a.end_agency_cd";
                    dataSql +=" , a.end_wh_cd";
                    dataSql +=" , a.end_agency_tel_no";
                    dataSql +=" , a.end_fax_no";
                    dataSql +=" , a.end_agency_address";
                    dataSql +=" , a.delv_cust_cd";
                    dataSql +=" , a.delv_cust_tel_no";
                    dataSql +=" , a.delv_cust_remark";
                    dataSql +=" , a.load_finish_yn";
                    dataSql +=" , b.stock_id";
                    dataSql +=" , b.serial_id";
                    dataSql +=" , od.release_order_no";
                    dataSql +=" , '' as agency_order_no";
                    dataSql +=" , a.delv_fee";
					dataSql +=" , item.spec";
					dataSql +=" , z.plate_no3 ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" from tb_release_storage a";
                    dataSql +=" left join tb_release_storage_detail b on b.release_no = a.release_no";
                    dataSql +=" left join tb_ma_agency ag on ag.agency_cd = a.end_agency_cd";
                    dataSql +=" left join tb_release_order_storage od on od.release_order_no = b.release_order_no";
                    dataSql +=" left join vw_ma_item item on item.item_cd = b.item_cd";
                    dataSql +=" left join tb_product_serial serial on serial.serial_id = b.serial_id";
                    dataSql +=" left join tb_ma_wh wh on wh.wh_cd = a.start_wh_cd and wh.use_yn = 'Y'";
                    dataSql +=" left join vw_ma_code_release_status rs on rs.release_status = a.release_status";
                    dataSql +=" left join vw_ma_item_parts_option ot1 on ot1.option_item_cd = b.option_1 and ot1.item_cd = b.item_cd and ot1.parts_option_type = 'W'";
                    dataSql +=" left join vw_ma_item_parts_option ot3 on ot3.option_item_cd = b.option_3 and ot3.item_cd = b.item_cd and ot3.parts_option_type = 'H'";
                    dataSql +=" LEFT JOIN tb_manufacture_work z ON z.prod_item_cd  = b.item_cd AND z.serial_id  = b.serial_id ";/*Cuong add for printing 2024-01-03*/
                    dataSql +=" group by a.release_no, b.sorder with rollup) a";
                    dataSql +=" where a.sorder is not null)) a WHERE";
                    dataSql +=" a.release_no = '"+releaseNo+"'";
                    dataSql +=" ORDER BY";
                    dataSql +=" concat(";
                    dataSql +=" SUBSTRING( a.release_no, 1, 7 ),";
                    dataSql +=" SUBSTRING( a.release_no, 9, 3 ))";
                  List<Map<String, Object>> data = selectAllQuery(conn,dataSql);
                  List<Map<String, Object>> item_data = new ArrayList<>();;
                  String dataSql1;
                  for(int i = 0 ; i < data.size() ; i ++){
                      String item_cd = data.get(i).get("item_cd").toString();
                      dataSql1 = "select * from tb_ma_item_sale_option where option_item_type = 'PROD' and prod_option_type = '부대품' and item_cd = '"+item_cd+"'";
                      item_data = selectAllQuery(conn, dataSql1);
                  }
                 
                  dataSql = "select cust_name, tel_no, address, ceo_name from tb_ma_cust where cust_cd = 'YNK00132'";
                  Map<String, Object> driver_data = selectFirstQuery(conn, dataSql);
                  
                
                Map<String, Object> response_data = new HashMap<>();
                response_data.put("status", 200);
                response_data.put("message", "OK");
                response_data.put("res", data);
                response_data.put("driver", driver_data);
                response_data.put("item", item_data);
                response_data.put("sql", dataSql);
                String jsonString = new Gson().toJson(response_data);
                out.write(jsonString);
        }
    }
             

            
        } catch (Throwable throwable) {
            if (conn != null) {
                conn.rollback();
                logger.info("!!!!ROLLBACK DONE!!!!");
            }
            throw throwable;
        } finally {
            if (conn != null) conn.close();
            if (pstmt != null) pstmt.close();
        }
    } catch (Exception e) {
        out.write("error : " + e.getMessage().toString() + "\n");
        if (conn != null) conn.close();
        if (pstmt != null) pstmt.close();
    }
%>
